
project build/make/
diff --git a/target/board/generic_x86_64/BoardConfig.mk b/target/board/generic_x86_64/BoardConfig.mk
index 07bbc071ac..127d7ff683 100755
--- a/target/board/generic_x86_64/BoardConfig.mk
+++ b/target/board/generic_x86_64/BoardConfig.mk
@@ -40,3 +40,5 @@ WPA_SUPPLICANT_VERSION      := VER_0_8_X
 WIFI_DRIVER_FW_PATH_PARAM   := "/dev/null"
 WIFI_DRIVER_FW_PATH_STA     := "/dev/null"
 WIFI_DRIVER_FW_PATH_AP      := "/dev/null"
+
+include vendor/google/emu-x86/board/native_bridge_arm_on_x86.mk
\ No newline at end of file

project build/soong/
diff --git a/cc/config/vndk.go b/cc/config/vndk.go
index 6f2e80741..fa1bb2a9c 100644
--- a/cc/config/vndk.go
+++ b/cc/config/vndk.go
@@ -47,4 +47,5 @@ var VndkMustUseVendorVariantList = []string{
 	"libstagefright_xmlparser",
 	"libui",
 	"libxml2",
+	"android.hardware.radio@1.4",
 }

project device/generic/goldfish/
diff --git a/gnss/gnss_hw_conn.cpp b/gnss/gnss_hw_conn.cpp
index f7c07032..9ac37915 100644
--- a/gnss/gnss_hw_conn.cpp
+++ b/gnss/gnss_hw_conn.cpp
@@ -22,6 +22,8 @@
 #include <sys/socket.h>
 #include "gnss_hw_conn.h"
 #include "gnss_hw_listener.h"
+#include <math.h>
+#include "position.h"
 
 namespace {
 constexpr char kCMD_QUIT = 'q';
@@ -91,6 +93,25 @@ bool GnssHwConn::stop() {
     return ok() && sendWorkerThreadCommand(kCMD_STOP);
 }
 
+unsigned int calculate_nmea_checksum(const char *sentence) {
+    // '$'와 '*' 사이의 문자에 대해 XOR 연산 수행
+    unsigned int checksum = 0;
+    int i = 0;
+
+    // 문장 시작 부분을 '$' 다음으로 이동
+    if (sentence[0] == '$') {
+        i = 1;
+    }
+
+    while (sentence[i] && sentence[i] != '*') {
+        checksum ^= sentence[i];
+        i++;
+    }
+
+    return checksum;
+}
+
+
 void GnssHwConn::workerThread(int devFd, int threadsFd, const DataSink* sink) {
     const unique_fd epollFd(epoll_create1(0));
     if (!epollFd.ok()) {
@@ -104,18 +125,106 @@ void GnssHwConn::workerThread(int devFd, int threadsFd, const DataSink* sink) {
     GnssHwListener listener(sink);
     bool running = false;
 
+    double num1,num2;
+    char c1,c2;
+    time_t rawtime;
+    struct tm *timeinfo;
+
+
+    bool myloop = true;
+    // now loop
+
+    struct GPS_X_Y *pGPS;
+    pGPS = my_gps;
+
+
     while (true) {
         struct epoll_event events[2];
-        const int kTimeoutMs = 60000;
-        const int n = TEMP_FAILURE_RETRY(epoll_wait(epollFd.get(),
+        // const int kTimeoutMs = 60000;
+        // const int n = TEMP_FAILURE_RETRY(epoll_wait(epollFd.get(),
+        //                                             events, 2,
+        //                                             kTimeoutMs));
+
+        const int kTimeoutMs = 2000;
+        int n = (epoll_wait(epollFd.get(),
                                                     events, 2,
                                                     kTimeoutMs));
+
+        sleep(2);
+        n=1;
+
+        if(true)
+        {
+
+            num1 = pGPS->x ;
+            num2 = pGPS->y ;
+
+            c1= (num1<0)?'S':'N';
+            c2= (num2<0)?'W':'E';
+
+            num1 =   (int)num1 * 100.0 + (num1 - (int)num1) * 60.0;
+            num2 = (int)num2 * 100.0 + (num2 - (int)num2) * 60.0;
+ 
+            if(pGPS->x == INFINITY)
+            {
+                myloop = false;
+            }
+            else if(pGPS==my_gps)
+            {
+                myloop = true;
+            }
+
+            if(myloop == false)
+            {
+                pGPS--;
+            }
+            else{
+                pGPS++;
+            }
+
+
+            char  nmeaMessage[100];
+
+            time(&rawtime);
+            timeinfo = gmtime(&rawtime); // UTC 시간 사용
+
+            snprintf(nmeaMessage,sizeof(nmeaMessage),"$GPGGA,%02d%02d%02d,%0.05f,%c,%0.05f,%c,1,04,0.9,0,M,,M,,*", \
+            timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec,
+            num1,c1,num2,c2);
+            unsigned int nmeachecksum  = calculate_nmea_checksum(nmeaMessage);
+            // 체크섬을 메시지에 추가
+            snprintf(nmeaMessage, sizeof(nmeaMessage), "%s%02X\n", nmeaMessage, nmeachecksum);
+            ALOGD("NMEA Message: %s", nmeaMessage);
+            int  nn, ret;
+            ret = strlen(nmeaMessage);
+            ALOGD("received %d bytes: %.*s", ret, ret, nmeaMessage);
+            for (nn = 0; nn < ret; nn++)
+                listener.consume(nmeaMessage[nn]);               
+///////////////////////////////////////
+            snprintf(nmeaMessage,sizeof(nmeaMessage)," $GPRMC,%02d%02d%02d,A,%.05f,%c,%.05f,%c,016.2,360.0,%02d%02d%02d,011.3,E*", \
+            timeinfo->tm_hour, timeinfo->tm_min, timeinfo->tm_sec,
+            num1,c1,num2,c2,
+            (timeinfo->tm_year + 1900) % 100, timeinfo->tm_mon + 1,  timeinfo->tm_mday);
+
+            nmeachecksum  = calculate_nmea_checksum(nmeaMessage);
+            // 체크섬을 메시지에 추가
+            snprintf(nmeaMessage, sizeof(nmeaMessage), "%s%02X\n", nmeaMessage, nmeachecksum);
+            // sprintf(nmeaMessage,"%s","geo nmea $GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62");
+                                            //          ,042812,A,3724.29040,N,12705.46060,E,,016.2,360.0,240307,011.3,E*5A
+
+            ALOGD("NMEA Message: %s", nmeaMessage);
+            ret = strlen(nmeaMessage);
+            ALOGD("received %d bytes: %.*s", ret, ret, nmeaMessage);
+            for (nn = 0; nn < ret; nn++)
+                listener.consume(nmeaMessage[nn]);  
+           
+        }
+
         if (n < 0) {
             ALOGE("%s:%d: epoll_wait failed with '%s'",
                   __PRETTY_FUNCTION__, __LINE__, strerror(errno));
             continue;
         }
-
         for (int i = 0; i < n; ++i) {
             const struct epoll_event* ev = &events[i];
             const int fd = ev->data.fd;
@@ -133,7 +242,7 @@ void GnssHwConn::workerThread(int devFd, int threadsFd, const DataSink* sink) {
                         if (n > 0) {
                             if (running) {
                                 for (int i = 0; i < n; ++i) {
-                                    listener.consume(buf[i]);
+                                    // listener.consume(buf[i]);
                                 }
                             }
                         } else {
diff --git a/gnss/gnss_hw_listener.cpp b/gnss/gnss_hw_listener.cpp
index cde8c570..ae56a9f8 100644
--- a/gnss/gnss_hw_listener.cpp
+++ b/gnss/gnss_hw_listener.cpp
@@ -223,6 +223,8 @@ bool GnssHwListener::parseGPGGA(const char* begin, const char* end,
     char ew = 0;
     char altitudeUnit = 0;
 
+    ALOGE("GPGGA GOGO");
+
     if (sscanf(begin, "%06d,%d.%n%d%n,%c,%d.%n%d%n,%c,%d,%d,%n",
                &hhmmss,
                &latdmm, &latdmmConsumed, &latf, &latfConsumed, &ns,
@@ -233,6 +235,8 @@ bool GnssHwListener::parseGPGGA(const char* begin, const char* end,
         return false;
     }
 
+    ALOGE("GPGGA GOGO 2");
+
     begin = skipAfter(begin + consumed, end, ',');  // skip HDOP
     if (!begin) {
         return false;
@@ -255,11 +259,11 @@ bool GnssHwListener::parseGPGGA(const char* begin, const char* end,
         info20->constellation = ahg20::GnssConstellationType::GPS;
         info10->svid = i + 3;
         info10->constellation = ahg10::GnssConstellationType::GPS;
-        info10->cN0Dbhz = 30;
+        info10->cN0Dbhz = 60;
         info10->elevationDegrees = 0;
         info10->azimuthDegrees = 0;
         info10->carrierFrequencyHz = 1.59975e+09;
-        info10->svFlag = ahg10::IGnssCallback::GnssSvFlags::HAS_CARRIER_FREQUENCY | 0;
+        info10->svFlag = ahg10::IGnssCallback::GnssSvFlags::USED_IN_FIX  | ahg10::IGnssCallback::GnssSvFlags::HAS_CARRIER_FREQUENCY | 0;
     }
 
     m_sink->gnssSvStatus(svInfo);
@@ -268,3 +272,4 @@ bool GnssHwListener::parseGPGGA(const char* begin, const char* end,
 }
 
 }  // namespace goldfish
+
diff --git a/sepolicy/common/property_contexts b/sepolicy/common/property_contexts
index f720a058..8418a1be 100644
--- a/sepolicy/common/property_contexts
+++ b/sepolicy/common/property_contexts
@@ -15,3 +15,6 @@ ro.zygote.disable_gl_preload            u:object_r:qemu_prop:s0
 persist.dumpstate.verbose_logging.enabled u:object_r:hal_dumpstate_default_prop:s0
 bt.rootcanal_mac_address  u:object_r:hal_bluetooth_sim_prop:s0
 bt.rootcanal_test_console  u:object_r:hal_bluetooth_sim_prop:s0
+ro.dalvik.vm.isa.arm u:object_r:qemu_prop:s0
+ro.dalvik.vm.isa.arm64 u:object_r:qemu_prop:s0
+ro.enable.native.bridge.exe u:object_r:qemu_prop:s0
diff --git a/x86_64-vendor.mk b/x86_64-vendor.mk
index 6dfadc0e..e7e1b315 100644
--- a/x86_64-vendor.mk
+++ b/x86_64-vendor.mk
@@ -57,3 +57,300 @@ PRODUCT_COPY_FILES += \
     device/generic/goldfish/fstab.ranchu.initrd:$(TARGET_COPY_OUT_VENDOR_RAMDISK)/fstab.ranchu \
     device/generic/goldfish/fstab.ranchu:$(TARGET_COPY_OUT_VENDOR)/etc/fstab.ranchu
 endif
+
+
+PRODUCT_ARTIFACT_PATH_REQUIREMENT_ALLOWED_LIST = \
+system/bin/arm/app_process \
+system/bin/arm/linker \
+system/bin/arm64/app_process64 \
+system/bin/arm64/linker64 \
+system/bin/ndk_translation_program_runner_binfmt_misc \
+system/bin/ndk_translation_program_runner_binfmt_misc_arm64 \
+system/etc/binfmt_misc/arm64_dyn \
+system/etc/binfmt_misc/arm64_exe \
+system/etc/binfmt_misc/arm_dyn \
+system/etc/binfmt_misc/arm_exe \
+system/etc/init/ndk_translation_arm64.rc \
+system/etc/ld.config.arm.txt \
+system/etc/ld.config.arm64.txt \
+system/lib/arm/android.hardware.renderscript@1.0.so \
+system/lib/arm/cpuinfo \
+system/lib/arm/ld-android.so \
+system/lib/arm/libEGL.so \
+system/lib/arm/libGLESv1_CM.so \
+system/lib/arm/libGLESv2.so \
+system/lib/arm/libGLESv3.so \
+system/lib/arm/libOpenMAXAL.so \
+system/lib/arm/libOpenSLES.so \
+system/lib/arm/libRS.so \
+system/lib/arm/libRSCpuRef.so \
+system/lib/arm/libRSDriver.so \
+system/lib/arm/libRSSupport.so \
+system/lib/arm/libRS_internal.so \
+system/lib/arm/libaaudio.so \
+system/lib/arm/libamidi.so \
+system/lib/arm/libandroid.so \
+system/lib/arm/libandroid_runtime.so \
+system/lib/arm/libandroidicu.so \
+system/lib/arm/libbacktrace.so \
+system/lib/arm/libbase.so \
+system/lib/arm/libbcinfo.so \
+system/lib/arm/libbinder_ndk.so \
+system/lib/arm/libblas.so \
+system/lib/arm/libc++.so \
+system/lib/arm/libc.so \
+system/lib/arm/libcamera2ndk.so \
+system/lib/arm/libcgrouprc.so \
+system/lib/arm/libcompiler_rt.so \
+system/lib/arm/libcrypto.so \
+system/lib/arm/libcutils.so \
+system/lib/arm/libdl.so \
+system/lib/arm/libdl_android.so \
+system/lib/arm/libft2.so \
+system/lib/arm/libhidlbase.so \
+system/lib/arm/libicui18n.so \
+system/lib/arm/libicuuc.so \
+system/lib/arm/libjnigraphics.so \
+system/lib/arm/liblog.so \
+system/lib/arm/liblzma.so \
+system/lib/arm/libm.so \
+system/lib/arm/libmediandk.so \
+system/lib/arm/libnative_bridge_vdso.so \
+system/lib/arm/libnativehelper.so \
+system/lib/arm/libnativewindow.so \
+system/lib/arm/libneuralnetworks.so \
+system/lib/arm/libpng.so \
+system/lib/arm/libprocessgroup.so \
+system/lib/arm/libsqlite.so \
+system/lib/arm/libssl.so \
+system/lib/arm/libstdc++.so \
+system/lib/arm/libsync.so \
+system/lib/arm/libunwindstack.so \
+system/lib/arm/libutils.so \
+system/lib/arm/libutilscallstack.so \
+system/lib/arm/libvndksupport.so \
+system/lib/arm/libvulkan.so \
+system/lib/arm/libwebviewchromium_plat_support.so \
+system/lib/arm/libz.so \
+system/lib/libndk_translation.so \
+system/lib/libndk_translation_proxy_libEGL.so \
+system/lib/libndk_translation_proxy_libGLESv1_CM.so \
+system/lib/libndk_translation_proxy_libGLESv2.so \
+system/lib/libndk_translation_proxy_libGLESv3.so \
+system/lib/libndk_translation_proxy_libOpenMAXAL.so \
+system/lib/libndk_translation_proxy_libOpenSLES.so \
+system/lib/libndk_translation_proxy_libaaudio.so \
+system/lib/libndk_translation_proxy_libamidi.so \
+system/lib/libndk_translation_proxy_libandroid.so \
+system/lib/libndk_translation_proxy_libandroid_runtime.so \
+system/lib/libndk_translation_proxy_libbinder_ndk.so \
+system/lib/libndk_translation_proxy_libc.so \
+system/lib/libndk_translation_proxy_libcamera2ndk.so \
+system/lib/libndk_translation_proxy_libicui18n.so \
+system/lib/libndk_translation_proxy_libicuuc.so \
+system/lib/libndk_translation_proxy_libjnigraphics.so \
+system/lib/libndk_translation_proxy_libmediandk.so \
+system/lib/libndk_translation_proxy_libnativehelper.so \
+system/lib/libndk_translation_proxy_libnativewindow.so \
+system/lib/libndk_translation_proxy_libneuralnetworks.so \
+system/lib/libndk_translation_proxy_libvulkan.so \
+system/lib/libndk_translation_proxy_libwebviewchromium_plat_support.so \
+system/lib64/arm64/android.hardware.renderscript@1.0.so \
+system/lib64/arm64/cpuinfo \
+system/lib64/arm64/ld-android.so \
+system/lib64/arm64/libEGL.so \
+system/lib64/arm64/libGLESv1_CM.so \
+system/lib64/arm64/libGLESv2.so \
+system/lib64/arm64/libGLESv3.so \
+system/lib64/arm64/libOpenMAXAL.so \
+system/lib64/arm64/libOpenSLES.so \
+system/lib64/arm64/libRS.so \
+system/lib64/arm64/libRSCpuRef.so \
+system/lib64/arm64/libRSDriver.so \
+system/lib64/arm64/libRSSupport.so \
+system/lib64/arm64/libRS_internal.so \
+system/lib64/arm64/libaaudio.so \
+system/lib64/arm64/libamidi.so \
+system/lib64/arm64/libandroid.so \
+system/lib64/arm64/libandroid_runtime.so \
+system/lib64/arm64/libandroidicu.so \
+system/lib64/arm64/libbacktrace.so \
+system/lib64/arm64/libbase.so \
+system/lib64/arm64/libbcinfo.so \
+system/lib64/arm64/libbinder_ndk.so \
+system/lib64/arm64/libblas.so \
+system/lib64/arm64/libc++.so \
+system/lib64/arm64/libc.so \
+system/lib64/arm64/libcamera2ndk.so \
+system/lib64/arm64/libcgrouprc.so \
+system/lib64/arm64/libcompiler_rt.so \
+system/lib64/arm64/libcrypto.so \
+system/lib64/arm64/libcutils.so \
+system/lib64/arm64/libdl.so \
+system/lib64/arm64/libdl_android.so \
+system/lib64/arm64/libft2.so \
+system/lib64/arm64/libhidlbase.so \
+system/lib64/arm64/libicui18n.so \
+system/lib64/arm64/libicuuc.so \
+system/lib64/arm64/libjnigraphics.so \
+system/lib64/arm64/liblog.so \
+system/lib64/arm64/liblzma.so \
+system/lib64/arm64/libm.so \
+system/lib64/arm64/libmediandk.so \
+system/lib64/arm64/libnative_bridge_vdso.so \
+system/lib64/arm64/libnativehelper.so \
+system/lib64/arm64/libnativewindow.so \
+system/lib64/arm64/libneuralnetworks.so \
+system/lib64/arm64/libpng.so \
+system/lib64/arm64/libprocessgroup.so \
+system/lib64/arm64/libsqlite.so \
+system/lib64/arm64/libssl.so \
+system/lib64/arm64/libstdc++.so \
+system/lib64/arm64/libsync.so \
+system/lib64/arm64/libunwindstack.so \
+system/lib64/arm64/libutils.so \
+system/lib64/arm64/libutilscallstack.so \
+system/lib64/arm64/libvndksupport.so \
+system/lib64/arm64/libvulkan.so \
+system/lib64/arm64/libwebviewchromium_plat_support.so \
+system/lib64/arm64/libz.so \
+system/lib64/libndk_translation.so \
+system/lib64/libndk_translation_proxy_libEGL.so \
+system/lib64/libndk_translation_proxy_libGLESv1_CM.so \
+system/lib64/libndk_translation_proxy_libGLESv2.so \
+system/lib64/libndk_translation_proxy_libGLESv3.so \
+system/lib64/libndk_translation_proxy_libOpenMAXAL.so \
+system/lib64/libndk_translation_proxy_libOpenSLES.so \
+system/lib64/libndk_translation_proxy_libaaudio.so \
+system/lib64/libndk_translation_proxy_libamidi.so \
+system/lib64/libndk_translation_proxy_libandroid.so \
+system/lib64/libndk_translation_proxy_libandroid_runtime.so \
+system/lib64/libndk_translation_proxy_libbinder_ndk.so \
+system/lib64/libndk_translation_proxy_libc.so \
+system/lib64/libndk_translation_proxy_libcamera2ndk.so \
+system/lib64/libndk_translation_proxy_libicui18n.so \
+system/lib64/libndk_translation_proxy_libicuuc.so \
+system/lib64/libndk_translation_proxy_libjnigraphics.so \
+system/lib64/libndk_translation_proxy_libmediandk.so \
+system/lib64/libndk_translation_proxy_libnativehelper.so \
+system/lib64/libndk_translation_proxy_libnativewindow.so \
+system/lib64/libndk_translation_proxy_libneuralnetworks.so \
+system/lib64/libndk_translation_proxy_libvulkan.so \
+system/lib64/libndk_translation_proxy_libwebviewchromium_plat_support.so \
+system/priv-app/Turbo/Turbo.apk \
+system/usr/srec/en-US/APP_NAME.fst \
+system/usr/srec/en-US/APP_NAME.syms \
+system/usr/srec/en-US/CLG.prewalk.fst \
+system/usr/srec/en-US/CONTACT_NAME.fst \
+system/usr/srec/en-US/CONTACT_NAME.syms \
+system/usr/srec/en-US/SONG_NAME.fst \
+system/usr/srec/en-US/SONG_NAME.syms \
+system/usr/srec/en-US/am_phonemes.syms \
+system/usr/srec/en-US/app_bias.fst \
+system/usr/srec/en-US/c_fst \
+system/usr/srec/en-US/commands.abnf \
+system/usr/srec/en-US/compile_grammar.config \
+system/usr/srec/en-US/config.pumpkin \
+system/usr/srec/en-US/confirmation_bias.fst \
+system/usr/srec/en-US/contacts.abnf \
+system/usr/srec/en-US/contacts_bias.fst \
+system/usr/srec/en-US/contacts_disambig.fst \
+system/usr/srec/en-US/dict \
+system/usr/srec/en-US/dictation.config \
+system/usr/srec/en-US/dnn \
+system/usr/srec/en-US/embedded_class_denorm.mfar \
+system/usr/srec/en-US/embedded_normalizer.mfar \
+system/usr/srec/en-US/endpointer_dictation.config \
+system/usr/srec/en-US/endpointer_model \
+system/usr/srec/en-US/endpointer_model.mmap \
+system/usr/srec/en-US/endpointer_voicesearch.config \
+system/usr/srec/en-US/ep_portable_mean_stddev \
+system/usr/srec/en-US/ep_portable_model.uint8.mmap \
+system/usr/srec/en-US/g2p.data \
+system/usr/srec/en-US/g2p_fst \
+system/usr/srec/en-US/g2p_graphemes.syms \
+system/usr/srec/en-US/g2p_phonemes.syms \
+system/usr/srec/en-US/grammar.config \
+system/usr/srec/en-US/hmm_symbols \
+system/usr/srec/en-US/hmmlist \
+system/usr/srec/en-US/input_mean_std_dev \
+system/usr/srec/en-US/lexicon.U.fst \
+system/usr/srec/en-US/lstm_model.uint8.data \
+system/usr/srec/en-US/magic_mic.config \
+system/usr/srec/en-US/media_bias.fst \
+system/usr/srec/en-US/metadata \
+system/usr/srec/en-US/monastery_config.pumpkin \
+system/usr/srec/en-US/norm_fst \
+system/usr/srec/en-US/offensive_word_normalizer.mfar \
+system/usr/srec/en-US/offline_action_data.pb \
+system/usr/srec/en-US/phonelist \
+system/usr/srec/en-US/portable_lstm \
+system/usr/srec/en-US/portable_meanstddev \
+system/usr/srec/en-US/pumpkin.mmap \
+system/usr/srec/en-US/read_items_bias.fst \
+system/usr/srec/en-US/rescoring.fst.compact \
+system/usr/srec/en-US/semantics.pumpkin \
+system/usr/srec/en-US/skip_items_bias.fst \
+system/usr/srec/en-US/time_bias.fst \
+system/usr/srec/en-US/transform.mfar \
+system/usr/srec/en-US/voice_actions.config \
+system/usr/srec/en-US/voice_actions_compiler.config \
+system/usr/srec/en-US/word_confidence_classifier \
+system/usr/srec/en-US/wordlist.syms \
+system/app/GoogleCalendarSyncAdapter/GoogleCalendarSyncAdapter.apk \
+system/app/GoogleTTS/GoogleTTS.apk \
+system/etc/default-permissions/default-permissions.xml \
+system/etc/default-permissions/opengapps-permissions-q.xml \
+system/etc/permissions/com.google.android.camera2.xml \
+system/etc/permissions/com.google.android.dialer.support.xml \
+system/etc/permissions/com.google.android.maps.xml \
+system/etc/permissions/com.google.android.media.effects.xml \
+system/etc/permissions/com.google.vr.platform.xml \
+system/etc/permissions/com.google.widevine.software.drm.xml \
+system/etc/permissions/privapp-permissions-google.xml \
+system/etc/permissions/split-permissions-google.xml \
+system/etc/preferred-apps/google.xml \
+system/etc/sysconfig/google-hiddenapi-package-whitelist.xml \
+system/etc/sysconfig/google.xml \
+system/etc/sysconfig/google_exclusives_enable.xml \
+system/etc/sysconfig/google_vr_build.xml \
+system/framework/com.google.android.camera.experimental2019.jar \
+system/framework/com.google.android.camera2.jar \
+system/framework/com.google.android.dialer.support.jar \
+system/framework/com.google.android.maps.jar \
+system/framework/com.google.android.media.effects.jar \
+system/framework/com.google.vr.platform.jar \
+system/framework/com.google.widevine.software.drm.jar \
+system/priv-app/AndroidMigratePrebuilt/AndroidMigratePrebuilt.apk \
+system/priv-app/GmsCoreSetupPrebuilt/GmsCoreSetupPrebuilt.apk \
+system/priv-app/GoogleBackupTransport/GoogleBackupTransport.apk \
+system/priv-app/GoogleFeedback/GoogleFeedback.apk \
+system/priv-app/GoogleLoginService/GoogleLoginService.apk \
+system/priv-app/GoogleOneTimeInitializer/GoogleOneTimeInitializer.apk \
+system/priv-app/GooglePackageInstaller/GooglePackageInstaller.apk \
+system/priv-app/GooglePartnerSetup/GooglePartnerSetup.apk \
+system/priv-app/GoogleServicesFramework/GoogleServicesFramework.apk \
+system/priv-app/Phonesky/Phonesky.apk \
+system/priv-app/PrebuiltGmsCore/PrebuiltGmsCore.apk \
+system/priv-app/SetupWizard/SetupWizard.apk \
+system/app/GoogleContactsSyncAdapter/GoogleContactsSyncAdapter.apk \
+system/app/KoreanIME/KoreanIME.apk \
+
+USE_EMU_GAPPS := true
+GAPPS_VARIANT := pico
+GAPPS_PRODUCT_PACKAGES +=  KoreanIME
+PRODUCT_SYSTEM_DEFAULT_PROPERTIES += \
+    persist.sys.language=ko \
+
+
+GAPPS_EXCLUDED_PACKAGES += \
+SetupWizard \
+Phonesky \
+GoogleTTS \
+
+
+$(call inherit-product, vendor/google/emu-x86/target/native_bridge_arm_on_x86.mk)
+$(call inherit-product, vendor/google/emu-x86/target/libndk_translation.mk)
+
+$(call inherit-product, vendor/opengapps/build/opengapps-packages.mk)
+

project vendor/opengapps/build/
diff --git a/CleanSpec.mk b/CleanSpec.mk
new file mode 100644
index 0000000..50b8df1
--- /dev/null
+++ b/CleanSpec.mk
@@ -0,0 +1,2 @@
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/system/app/*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/system/priv-app/*)
diff --git a/modules/Android.mk b/modules/Android.mk
new file mode 100644
index 0000000..03d69cf
--- /dev/null
+++ b/modules/Android.mk
@@ -0,0 +1 @@
+include $(call all-named-subdir-makefiles,$(GAPPS_PRODUCT_PACKAGES))
diff --git a/modules/KoreanIME/Android.mk b/modules/KoreanIME/Android.mk
index 16f0e69..be2053a 100644
--- a/modules/KoreanIME/Android.mk
+++ b/modules/KoreanIME/Android.mk
@@ -3,5 +3,6 @@ include $(CLEAR_VARS)
 include $(GAPPS_CLEAR_VARS)
 LOCAL_MODULE := KoreanIME
 LOCAL_PACKAGE_NAME := com.google.android.inputmethod.korean
+GAPPS_LOCAL_OVERRIDES_PACKAGES := LatinIME
 
 include $(BUILD_GAPPS_PREBUILT_APK)
